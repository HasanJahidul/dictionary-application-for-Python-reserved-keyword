1.
name: False
des: Boolean value, result of comparison operations
sc: print(5>6) False
********************************************************************
2.
name: None
des: Represents the absence of a value
sc: print(None) None
********************************************************************
3.
name: True
des: Boolean value, result of comparison operations
sc: print(5<6) True
********************************************************************
4.
name: and
des: Logical operator, returns True if both operands are True
sc: print(True and True) True
********************************************************************
5.
name: as
des: Keyword, used to define a name for a variable
sc: x = 5
print(x) 5
********************************************************************
6.
name: assert
des: Raises an error if the expression is False
sc: assert 5>6
********************************************************************
7.
name: async
des: Keyword, used to define a function or method as asynchronous
sc: async def f():
    print("Hello")
********************************************************************
8.
name: await
des: Keyword, used to define a function or method as asynchronous
sc: async def f():
    print("Hello")
********************************************************************
9.
name: break
des: Keyword, used to terminate a loop
sc: for i in range(10):
    if i == 5:
        break
********************************************************************
10.
name: class
des: Keyword, used to define a class
sc: class MyClass:
    def __init__(self):
        print("Hello")
********************************************************************
11.
name: continue
des: Keyword, used to skip the rest of the loop
sc: for i in range(10):
    if i == 5:
        continue
********************************************************************
12.
name: def
des: Keyword, used to define a function
sc: def f():
    print("Hello")
********************************************************************
13.
name: del
des: Keyword, used to delete an object
sc: x = 5
del x
********************************************************************
14.
name: elif
des: Keyword, used to define an else-if condition
sc: if 5>6:
    print("5 is greater than 6")
elif 5<6:
    print("5 is less than 6")
********************************************************************
15.
name: else
des: Keyword, used to define an else condition
sc: if 5>6:
    print("5 is greater than 6")
else:
    print("5 is less than 6")
********************************************************************
16.
name: except
des: Keyword, used to define an exception handler
sc: try:
    print("Hello")
except:
    print("Error")
********************************************************************
17.
name: finally
des: Keyword, used to define a finally block
sc: try:
    print("Hello")
except:
    print("Error")
finally:
    print("Finally")
********************************************************************
18.
name: for
des: Keyword, used to define a for loop
sc: for i in range(10):
    print(i)
********************************************************************
19.
name: from
des: Keyword, used to import a module
sc: from math import sqrt
********************************************************************
20.
name: global
des: Keyword, used to define a global variable
sc: global x
x = 5
********************************************************************
21.
name: if
des: Keyword, used to define an if condition
sc: if 5>6:
    print("5 is greater than 6")
********************************************************************
22.
name: import
des: Keyword, used to import a module
sc: import math
********************************************************************
23.
name: in
des: Keyword, used to define an in condition
sc: if 5 in [1,2,3,4,5]:
    print("5 is in the list")
********************************************************************
24.
name: is
des: Keyword, used to define an is condition
sc: if 5 is 5:
    print("5 is 5")
********************************************************************
25.
name: lambda
des: Keyword, used to define a lambda function
sc: f = lambda x: x**2
********************************************************************
26.
name: nonlocal
des: Keyword, used to define a nonlocal variable
sc: def f():
    x = 5
    def g():
        nonlocal x
        x = 6
    g()
    print(x)
********************************************************************
27.
name: not
des: Keyword, used to define a not condition
sc: print(not False)
********************************************************************
28.
name: or
des: Logical operator, returns True if either operand is True
sc: print(True or False) True
********************************************************************
29.
name: pass
des: Keyword, used to define a pass statement
sc: def f():
    pass
********************************************************************
30.
name: raise
des: Keyword, used to raise an error
sc: raise Exception("Error")
********************************************************************
31.
name: return
des: Keyword, used to define a return statement
sc: def f():
    return 5
********************************************************************
32.
name: try
des: Keyword, used to define a try block
sc: try:
    print("Hello")
except:
    print("Error")
********************************************************************
33.
name: while
des: Keyword, used to define a while loop
sc: while True:
    print("Hello")
********************************************************************
34.
name: with
des: Keyword, used to define a with block
sc: with open("file.txt") as f:
    print(f.read())
********************************************************************
35.
name: yield
des: Keyword, used to define a yield statement
sc: def f():
    yield 5
********************************************************************
