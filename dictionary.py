keywords= {
    'False':{'name':'False','des':'Boolean value, result of comparison operations','sc':'print(5>6) False'},
    'None':{'name':'None','des':'Represents the absence of a value','sc':'print(None) None'},
    'True':{'name':'True','des':'Boolean value, result of comparison operations','sc':'print(5<6) True'},
    'and':{'name':'and','des':'Logical operator, returns True if both operands are True','sc':'print(True and True) True'},
    'as':{'name':'as','des':'Keyword, used to define a name for a variable','sc':'x = 5\nprint(x) 5'},
    'assert':{'name':'assert','des':'Raises an error if the expression is False','sc':'assert 5>6'},
    'async':{'name':'async','des':'Keyword, used to define a function or method as asynchronous','sc':'async def f():\n    print("Hello")'},
    'await':{'name':'await','des':'Keyword, used to define a function or method as asynchronous','sc':'async def f():\n    print("Hello")'},
    'break':{'name':'break','des':'Keyword, used to terminate a loop','sc':'for i in range(10):\n    if i == 5:\n        break'},
    'class':{'name':'class','des':'Keyword, used to define a class','sc':'class MyClass:\n    def __init__(self):\n        print("Hello")'},
    'continue':{'name':'continue','des':'Keyword, used to skip the rest of the loop','sc':'for i in range(10):\n    if i == 5:\n        continue'},
    'def':{'name':'def','des':'Keyword, used to define a function','sc':'def f():\n    print("Hello")'},
    'del':{'name':'del','des':'Keyword, used to delete an object','sc':'x = 5\ndel x'},
    'elif':{'name':'elif','des':'Keyword, used to define an else-if condition','sc':'if 5>6:\n    print("5 is greater than 6")\nelif 5<6:\n    print("5 is less than 6")'},
    'else':{'name':'else','des':'Keyword, used to define an else condition','sc':'if 5>6:\n    print("5 is greater than 6")\nelse:\n    print("5 is less than 6")'},
    'except':{'name':'except','des':'Keyword, used to define an exception handler','sc':'try:\n    print("Hello")\nexcept:\n    print("Error")'},
    'finally':{'name':'finally','des':'Keyword, used to define a finally block','sc':'try:\n    print("Hello")\nexcept:\n    print("Error")\nfinally:\n    print("Finally")'},
    'for':{'name':'for','des':'Keyword, used to define a for loop','sc':'for i in range(10):\n    print(i)'},
    'from':{'name':'from','des':'Keyword, used to import a module','sc':'from math import sqrt'},
    'global':{'name':'global','des':'Keyword, used to define a global variable','sc':'global x\nx = 5'},
    'if':{'name':'if','des':'Keyword, used to define an if condition','sc':'if 5>6:\n    print("5 is greater than 6")'},
    'import':{'name':'import','des':'Keyword, used to import a module','sc':'import math'},
    'in':{'name':'in','des':'Keyword, used to define an in condition','sc':'if 5 in [1,2,3,4,5]:\n    print("5 is in the list")'},
    'is':{'name':'is','des':'Keyword, used to define an is condition','sc':'if 5 is 5:\n    print("5 is 5")'},
    'lambda':{'name':'lambda','des':'Keyword, used to define a lambda function','sc':'f = lambda x: x**2'},
    'nonlocal':{'name':'nonlocal','des':'Keyword, used to define a nonlocal variable','sc':'def f():\n    x = 5\n    def g():\n        nonlocal x\n        x = 6\n    g()\n    print(x)'},
    'not':{'name':'not','des':'Keyword, used to define a not condition','sc':'print(not False)'},
    'or':{'name':'or','des':'Logical operator, returns True if either operand is True','sc':'print(True or False) True'},
    'pass':{'name':'pass','des':'Keyword, used to define a pass statement','sc':'def f():\n    pass'},
    'raise':{'name':'raise','des':'Keyword, used to raise an error','sc':'raise Exception("Error")'},
    'return':{'name':'return','des':'Keyword, used to define a return statement','sc':'def f():\n    return 5'},
    'try':{'name':'try','des':'Keyword, used to define a try block','sc':'try:\n    print("Hello")\nexcept:\n    print("Error")'},
    'while':{'name':'while','des':'Keyword, used to define a while loop','sc':'while True:\n    print("Hello")'},
    'with':{'name':'with','des':'Keyword, used to define a with block','sc':'with open("file.txt") as f:\n    print(f.read())'},
    'yield':{'name':'yield','des':'Keyword, used to define a yield statement','sc':'def f():\n    yield 5'}
}